# Your keymap
#
# Atom keymaps work similarly to style sheets. Just as style sheets use
# selectors to apply styles to elements, Atom keymaps use selectors to associate
# keystrokes with events in specific contexts. Unlike style sheets however,
# each selector can only be declared once.
#
# You can create a new keybinding in this file by typing "key" and then hitting
# tab.
#
# Here's an example taken from Atom's built-in keymap:
#
# 'atom-text-editor':
#   'enter': 'editor:newline'
#
# 'atom-workspace':
#   'ctrl-shift-p': 'core:move-up'
#   'ctrl-p': 'core:move-down'
#
# You can find more information about keymaps in these guides:
# * http://flight-manual.atom.io/using-atom/sections/basic-customization/#_customizing_keybindings
# * http://flight-manual.atom.io/behind-atom/sections/keymaps-in-depth/
#
# If you're having trouble with your keybindings not working, try the
# Keybinding Resolver: `Cmd+.` on macOS and `Ctrl+.` on other platforms. See the
# Debugging Guide for more information:
# * http://flight-manual.atom.io/hacking-atom/sections/debugging/#check-the-keybindings
#
# This file uses CoffeeScript Object Notation (CSON).
# If you are unfamiliar with CSON, you can read more about it in the
# Atom Flight Manual:
# http://flight-manual.atom.io/using-atom/sections/basic-customization/#_cson

# conveniences:
'atom-workspace':
  'ctrl-cmd-o':         'advanced-open-file:toggle'

'.platform-darwin atom-text-editor[data-grammar~="clojure"].autocomplete-active':
  'enter':          'autocomplete-plus:confirm'

# paredit, modified to avoid conflicts with protorepl:
'atom-text-editor[data-grammar~="clojure"],
 atom-text-editor[data-grammar~="lisp"],
 atom-text-editor[data-grammar~="newlisp"],
 atom-text-editor[data-grammar~="racket"],
 atom-text-editor[data-grammar~="scheme"]':
  'ctrl-alt-{':         'lisp-paredit:barf-forwards'
  'ctrl-alt-)':         'lisp-paredit:slurp-forwards'
  'ctrl-alt-(':         'lisp-paredit:slurp-backwards'
  'ctrl-alt-}':         'lisp-paredit:barf-backwards'

  'cmd-delete':         'lisp-paredit:kill-sexp-forwards'

  'cmd-backspace':      'lisp-paredit:kill-sexp-backwards'
  'alt-backspace':      'lisp-paredit:kill-sexp-backwards'

  'ctrl-alt-i':         'lisp-paredit:indent'

  'ctrl-right':         'lisp-paredit:forward-sexp'
  'ctrl-left':          'lisp-paredit:backward-sexp'
  'ctrl-up':            'lisp-paredit:up-sexp'
  'ctrl-down':          'lisp-paredit:down-sexp'
  'ctrl-alt-w':             'lisp-paredit:expand-selection'

  'enter':              'lisp-paredit:newline'

  'ctrl-alt-up':        'lisp-paredit:splice-backwards'
  'ctrl-alt-s':         'lisp-paredit:splice'
  'ctrl-alt-/':         'lisp-paredit:split'
  #'ctrl-alt-(':         'lisp-paredit:wrap-around-parens'
  #'ctrl-alt-9':         'lisp-paredit:wrap-around-parens'
  #'ctrl-alt-[':         'lisp-paredit:wrap-around-square'
  #'ctrl-alt-{':         'lisp-paredit:wrap-around-curly'

'atom-text-editor[data-grammar~="clojure"].lisp-paredit-strict,
 atom-text-editor[data-grammar~="lisp"].lisp-paredit-strict,
 atom-text-editor[data-grammar~="newlisp"].lisp-paredit-strict,
 atom-text-editor[data-grammar~="racket"].lisp-paredit-strict,
 atom-text-editor[data-grammar~="scheme"].lisp-paredit-strict':
  'backspace':          'lisp-paredit:delete-backwards'
  'ctrl-h':             'lisp-paredit:delete-backwards'
  'delete':             'lisp-paredit:delete-forwards'
  'ctrl-d':             'lisp-paredit:delete-forwards'
  'cmd-v':              'lisp-paredit:paste'
